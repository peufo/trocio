openapi: 3.0.1
info:
  title: Trocio
  description: 'API de Trocio'
  contact:
    email: info@troc.io
  version: 1.0.0
servers:
  - url: http://localhost:5001
    description: server local
  - url: https://localhost:3000/api
    description: server local atteint à travers via proxy
components:
  parameters:
    querySkip:
      $ref: 'meta.yml#/components/parameters/querySkip'
    queryLimit:
      $ref: 'meta.yml#/components/parameters/queryLimit'
    queryTroc:
      $ref: 'meta.yml#/components/parameters/queryTroc'
    queryUser:
      $ref: 'meta.yml#/components/parameters/queryUser'
    pathTroc:
      $ref: 'meta.yml#/components/parameters/pathTroc'
    pathUser:
      $ref: 'meta.yml#/components/parameters/pathUser'
    pathArticle:
      $ref: 'meta.yml#/components/parameters/pathArticle'
  schemas:
    Success:
      $ref: 'meta.yml#/components/schemas/Success'
    Error:
      $ref: 'meta.yml#/components/schemas/Error'
    UserLogin:
      $ref: 'user.yml#/components/schemas/UserLogin'
    UserCreation:
      $ref: 'user.yml#/components/schemas/UserCreation'
    User:
      $ref: 'user.yml#/components/schemas/User'
    UserPublic:
      $ref: 'user.yml#/components/schemas/UserPublic'
    UserParticipant:
      $ref: 'user.yml#/components/schemas/UserParticipant'
    TrocBase:
      $ref: 'troc.yml#/components/schemas/TrocBase'
    Troc:
      $ref: 'troc.yml#/components/schemas/Troc'
    TrocLookupUser:
      $ref: 'troc.yml#/components/schemas/TrocLookupUser'
    TrocUserResum:
      $ref: 'troc.yml#/components/schemas/TrocUserResum'
    TrocUserSpec:
      $ref: 'troc.yml#/components/schemas/TrocUserSpec'
    ArticleCreate:
      $ref: 'article.yml#/components/schemas/ArticleCreate'
    Article:
      $ref: 'article.yml#/components/schemas/Article'
    PaymentCreate:
      $ref: 'payment.yml#/components/schemas/PaymentCreate'
    Payment:
      $ref: 'payment.yml#/components/schemas/Payment'
tags:
  - name: user
    description: Methodes relatives aux utilisateurs
  - name: troc
    description: Methodes relatives aux trocs
  - name: article
    description: Methodes relatives aux articles
  - name: payment
    description: Methodes relatives aux paiements
paths:
  #   ▢=====================================▢
  #   |               USER                   |
  #   ▢=====================================▢

  /users:
    post:
      tags: [user]
      summary: Création d'un compte utilisateur
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
      responses:
        200:
          description: Utilisateur nouvellement créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/login:
    post:
      tags: [user]
      summary: Connection d'un utilisateur
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        200:
          description: Utilisateur connecté
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/logout:
    get:
      tags: [user]
      summary: Déconnection de l'utilsateur
      operationId: logout
      responses:
        200:
          description: Message de succès
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
  /users/login-with-google:
    get:
      tags: [user]
      summary: Connection avec Google
      operationId: loginWithGoogle
      parameters:
        - in: query
          name: code
          required: true
          schema:
            type: string
        - in: query
          name: error
          required: true
          schema:
            type: string
        - in: query
          name: state
          required: true
          schema:
            type: string
      responses:
        200:
          description: Utilisateur connecté
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/me:
    get:
      tags: [user]
      summary: Accéder à mon profile
      operationId: getMe
      responses:
        200:
          description: Mon profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags: [user]
      summary: Mise jour de mon profile
      operationId: patchMe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
      responses:
        200:
          description: Mon profile mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/me/changepwd:
    post:
      tags: [user]
      summary: Changement de mon mot de passe
      operationId: changepwd
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: Message de success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
  /users/me/resetpwd:
    post:
      tags: [user]
      summary: Récupèrer mon mot de passe oublié
      operationId: resetpwd
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
      responses:
        200:
          description: Message de success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
  /users/me/validmail:
    post:
      tags: [user]
      summary: Valider mon mail ( envoie du mail )
      operationId: sendValidMail
      responses:
        200:
          description: Message de success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
  /users/me/validmail/{validator}:
    get:
      tags: [user]
      summary: Valider mon mail ( lien de validation )
      operationId: validMail
      parameters:
        - name: validator
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: Message de success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
  /users/search:
    get:
      tags: [user]
      summary: Chercher un utilisateur
      operationId: searchUser
      parameters:
        - name: q
          description: Recherche dans mail et name
          in: query
          schema:
            type: string
        - $ref: '#/components/parameters/querySkip'
        - $ref: '#/components/parameters/queryLimit'
      responses:
        200:
          description: Liste d'utilisateur
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPublic'
  /users/name/{userId}:
    get:
      tags: [user]
      summary: Valider mon mail ( lien de validation )
      operationId: getUserName
      parameters:
        - $ref: '#/components/parameters/pathUser'
      responses:
        200:
          description: Message de success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'

  #   ▢=====================================▢
  #   |                 TROC                 |
  #   ▢=====================================▢

  /trocs:
    post:
      operationId: createTroc
      tags: [troc]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrocBase'
      responses:
        200:
          description: Troc nouvellement créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocLookupUser'
    get:
      tags: [troc]
      summary: Récupère des trocs
      operationId: getTrocs
      parameters:
        - $ref: '#/components/parameters/querySkip'
        - $ref: '#/components/parameters/queryLimit'
        - name: _id
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
        - name: start
          in: query
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          schema:
            type: string
            format: date-time
        - name: north
          in: query
          schema:
            type: number
        - name: east
          in: query
          schema:
            type: number
        - name: sud
          in: query
          schema:
            type: number
        - name: west
          in: query
          schema:
            type: number
      responses:
        200:
          description: Liste de trocs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocBase'
  /trocs/resum:
    get:
      tags: [troc]
      summary: Récupère le résumé de l'activité d'un participant
      operationId: getTrocResum
      parameters:
        - $ref: '#/components/parameters/queryUser'
        - $ref: '#/components/parameters/queryTroc'
      responses:
        200:
          description: Résumé de l'activité d'un participant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocUserResum'
  /trocs/spec:
    get:
      tags: [troc]
      summary: Retourne les spécifications d'un utilisateur sur un troc (tarif, prefix, role)
      description: Les parametres troc et user sont remplacer par trocId et userId
      operationId: getSpec
      parameters:
        - $ref: '#/components/parameters/queryUser'
        - $ref: '#/components/parameters/queryTroc'
      responses:
        200:
          description: Spécifications d'un utilisateur sur un troc
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocUserSpec'
  /trocs/{trocId}/stats:
    get:
      operationId: getStats
      tags: [troc]
      parameters:
        - $ref: '#/components/parameters/pathTroc'
      responses:
        200:
          description: Troc mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Troc' # TODO
  /trocs/{trocId}:
    get:
      operationId: getTroc
      tags: [troc]
      parameters:
        - $ref: '#/components/parameters/pathTroc'
      responses:
        200:
          description: Troc
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocLookupUser'
    patch:
      operationId: patchTroc
      tags: [troc]
      parameters:
        - $ref: '#/components/parameters/pathTroc'
      responses:
        200:
          description: Troc mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocLookupUser'
  /trocs/{trocId}/admin:
    post:
      operationId: addAdmin
      tags: [troc]
      parameters:
        - $ref: '#/components/parameters/pathTroc'
      responses:
        200:
          description: Troc mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocLookupUser'
  /trocs/{trocId}/cashier:
    post:
      operationId: addCashier
      tags: [troc]
      parameters:
        - $ref: '#/components/parameters/pathTroc'
      responses:
        200:
          description: Troc mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocLookupUser'
  /trocs/{trocId}/trader:
    post:
      operationId: addTrader
      tags: [troc]
      parameters:
        - $ref: '#/components/parameters/pathTroc'
      responses:
        200:
          description: Troc mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocLookupUser'
  /trocs/{trocId}/admin/remove:
    post:
      operationId: removeAdmin
      tags: [troc]
      parameters:
        - $ref: '#/components/parameters/pathTroc'
      responses:
        200:
          description: Troc mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocLookupUser'
  /trocs/{trocId}/cashier/remove:
    post:
      operationId: removeCashier
      tags: [troc]
      parameters:
        - $ref: '#/components/parameters/pathTroc'
      responses:
        200:
          description: Troc mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocLookupUser'
  /trocs/{trocId}/trader/remove:
    post:
      operationId: removeTrader
      tags: [troc]
      parameters:
        - $ref: '#/components/parameters/pathTroc'
      responses:
        200:
          description: Troc mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocLookupUser'
  /trocs/{trocId}/trader/prefix:
    post:
      operationId: editTraderPrefix
      tags: [troc]
      parameters:
        - $ref: '#/components/parameters/pathTroc'
      responses:
        200:
          description: Troc mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrocLookupUser'

  #   ▢=====================================▢
  #   |               ARTICLE                |
  #   ▢=====================================▢

  /articles:
    post:
      summary: Création d'article. Fonctionne également avec une list d'article.
      operationId: createArticle
      tags: [article]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/ArticleCreate'
      responses:
        200:
          $ref: 'article.yml#/components/responses/200_Article'
    get:
      summary: Recherche d'articles
      operationId: searchArticle
      tags: [article]
      parameters:
        - name: troc
          in: query
          schema:
            type: string
        - name: filter_statut
          in: query
          schema:
            type: string
        - name: provider
          in: query
          schema:
            type: string
        - name: providernot
          in: query
          schema:
            type: string
        - name: include_without_name
          in: query
          schema:
            type: string
        - $ref: 'meta.yml#/components/parameters/querySkip'
        - $ref: 'meta.yml#/components/parameters/queryLimit'
      responses:
        200:
          $ref: 'article.yml#/components/responses/200_Articles'
    patch:
      operationId: patchArticle
      tags: [article]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Article'
      responses:
        200:
          description: Article mis à jour
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Article'
  /articles/{articleId}:
    get:
      operationId: getArticle
      tags: [article]
      parameters:
        - $ref: '#/components/parameters/pathArticle'
      responses:
        200:
          $ref: 'article.yml#/components/responses/200_Article'
    delete:
      summary: Supprimer un article
      operationId: deleteArticle
      tags: [article]
      parameters:
        - $ref: '#/components/parameters/pathArticle'
      responses:
        200:
          description: Message de succès
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Success'
  /articles/edit:
    post:
      deprecated: true
      operationId: editArticle
      tags: [article]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                article:
                  description: ID de l'article à éditer
                  type: string
                edits:
                  description: Changement à appliqué à l'article
                  type: object
                  properties:
                    allOf:
                      $ref: '#components/schemas/Article'
      responses:
        200:
          $ref: 'article.yml#/components/responses/200_Article'
  /articles/giveback:
    post:
      deprecated: true
      operationId: goBackArticle
      tags: [article]
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  _id:
                    description: Id de l'article retourner
                    type: string
      responses:
        200:
          $ref: 'article.yml#/components/responses/200_Articles'
  /articles/provided:
    get:
      operationId: getProvidedArticles
      tags: [article]
      parameters:
        - in: query
          required: true
          name: troc
          schema:
            type: string
        - in: query
          required: true
          name: provider
          schema:
            type: string
        - $ref: '#/components/parameters/querySkip'
        - $ref: '#/components/parameters/queryLimit'
      responses:
        200:
          $ref: 'article.yml#/components/responses/200_Articles'
  /articles/purschases:
    get:
      operationId: getPurchasesArticles
      tags: [article]
      parameters:
        - in: query
          required: true
          name: troc
          schema:
            type: string
        - in: query
          name: buyer
          schema:
            type: string
        - in: query
          name: seller
          schema:
            type: string
        - $ref: '#/components/parameters/querySkip'
        - $ref: '#/components/parameters/queryLimit'
      responses:
        200:
          $ref: 'article.yml#/components/responses/200_Articles'
  /articles/givebacks:
    get:
      operationId: getGivbacksArticles
      tags: [article]
      parameters:
        - in: query
          required: true
          name: troc
          schema:
            type: string
        - in: query
          name: user
          schema:
            type: string
        - $ref: '#/components/parameters/querySkip'
        - $ref: '#/components/parameters/queryLimit'
      responses:
        200:
          $ref: 'article.yml#/components/responses/200_Articles'

  #   ▢=====================================▢
  #   |               PAYMENT                |
  #   ▢=====================================▢

  /payements:
    post:
      summary: Nouveau paiement.
      operationId: createPayment
      tags: [payment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/PaymentCreate'
      responses:
        200:
          $ref: 'payment.yml#/components/responses/200_Payment'
    get:
      summary: Recherche de paiements
      operationId: searchPayment
      tags: [payment]
      parameters:
        - name: user
          in: query
          schema:
            type: string
        - name: acceptor
          in: query
          schema:
            type: string
        - name: troc
          in: query
          schema:
            type: string
      responses:
        200:
          $ref: 'payment.yml#/components/responses/200_Payments'
